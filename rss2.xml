<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[麦苗]]></title>
    <link>http://maizhibin.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[]]></description>
    <pubDate>Tue, 20 May 2014 08:57:10 GMT</pubDate>
    <generator>http://zespia.tw/hexo/</generator>
    
    <item>
      <title><![CDATA[MongoDB Sharding in Action]]></title>
      <link>http://maizhibin.github.io/2014/05/19/mongodb-sarding-in-action/</link>
      <guid>http://maizhibin.github.io/2014/05/19/mongodb-sarding-in-action/</guid>
      <pubDate>Mon, 19 May 2014 08:03:03 GMT</pubDate>
      
      <content:encoded><![CDATA[<h1 id="概述">概述</h1>
<p>在Sharding In Action之前，先了解一下什么是 Sharding。</p>
<p>所谓 Sharding 就是将数据水平切分到不同的物理节点。这里着重点有两个， 一个是水平切分，另一个是物理节点。一般我们说数据库的分库分表有两种类型。一种是水平划分，比如按用户 id 取模，按余数划分用户的数据；另一种是垂直划分，比如把交易数据放一个节点，把商品数据放另一个节点，甚至可以把交易基本信息放一个节点，详细信息放另一个节点。</p>
<p>这里所说的Sharding 指的是水平切分。</p>
<p>如下，Sharding的目的是要把一个Collection中1TB的数据，通过水平切分到4个机器上，切分后每个节点的数据变成原来的1/4。</p>
<p><img src="http://docs.mongodb.org/manual/_images/sharded-collection.png" alt="image"></p>
<p>MongoDB 的 Sharding 的特色就是自动化。具体体现为可以动态扩容、自动平衡数据、以及透明的使用接口。可以从一个普通的 replica set，或者单个实例平滑升级，可以动态增加删除节点，响应数据快速增长。可以自动在节点间平衡数据量，避免负载集中在少数节点，而在这期间不影响数据库读写访问。对客户端，可以使用完全相同的驱动，大部分功能可用，基本不需要更改任何代码。</p>
<p>下面我们对MongoDB的数据做水平切分。在正式环境下是把这些数据切分后放在不同的物理节点上，但为了演示方便，下面使用单机来部署这个Sharding环境。正式部署时只需要把IP和端口号改为实际IP即可。</p>
<blockquote>
<p>关于MongoDB Sharding的详细文档，可参考官方的详细说明——<a href="http://docs.mongodb.org/manual/core/sharding-introduction/" target="_blank">Sharding Introduction</a></p>
</blockquote>
<h1 id="逻辑结构">逻辑结构</h1>
<p>MongoDB做Sharding前，我们先要了解一下集群的逻辑结构。</p>
<p><img src="http://docs.mongodb.org/manual/_images/sharded-cluster-production-architecture.png" alt="image"></p>
<p><strong>Shards</strong>:  保存数据，保证高可用性和数据的一致性。单个Shard就是单节点部署时的mongod进程。</p>
<p><strong>Query Routers</strong>：mongos实例，提供给客户端访问Shards数据的接入点。一个集群可以有一到多个Query Router来承担客户端请求负载。</p>
<p><strong>Config servers</strong>:  存储集群的元数据，元数据包含数据和Shard的对应关系，这些元数据包括如下两个部分，每一个shard server 包括哪些 chunks，每个 chunk 存储了哪些 collections 的哪些 documents。mongos实例需要使用这些元数据以将客服端请求路由到所需数据所在的Shard上。如果集群中任何一台Config Server宕机，其它Config Server会变成只读状态，以保证多台Config Server的数据一致性。</p>
<h1 id="Sharding机制">Sharding机制</h1>
<p>了解几个概念</p>
<p><strong>Shard Keys</strong>：MongoDB主要根据Shard Keys来划分数据，Shard Keys可以由文档的一个或者多个物理键值组成。</p>
<p><strong>Chunks</strong>：Chunk是一组数据集合，在MongoDB中，Chunk表示为collection，minKey，maxKey构成的三元组，一个Chunk包括了Shard Key取值在minKey和maxKey之间一组文档集合，但Chunk并不存放实际数据。整个MongoDB的chunk元信息存放在config数据库的chunks Colecttion中。</p>
<p><strong>AutoSplit和MoveChunk</strong>: 当Chunk的大小达到ChunkSize（默认为64MB）时，MongoDB会根据minKey和maxKey的一个中间值将一个Chunk分裂（Split）为两个Chunk，分裂完毕后，MongoDB会根据各个Shard的负载情况，决定是否将新Chunk移动到其他Shard（MoveChunk）。但如果说Shard Key选择不当，数据超过64M后无法再分片，该chunk的大小就会不断增长而且不能在Shards之间做Balancing，导致数据分布不均匀。</p>
<p><img src="http://docs.mongodb.org/manual/_images/sharding-migrating.png" alt="image"></p>
<p>MongoDB的Balancing操作并不是随时发生的，而是会在每一个Shard的Chunks数量达到某一个阈值后才会自动触发（可关闭自动触发）。</p>
<table>
<thead>
<tr>
<th style="text-align:center">Chunks数量</th>
<th>Banancing阈值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">小于20个</td>
<td>2</td>
</tr>
<tr>
<td style="text-align:center">21-80</td>
<td>4</td>
</tr>
<tr>
<td style="text-align:center">大于80个</td>
<td>8</td>
</tr>
</tbody>
</table>
<h1 id="配置步骤">配置步骤</h1>
<p>单机资源有限，所以下面就创建一个Config Server(mongod)、一个Router(mongos)和两个Shard(mongod)。</p>
<p>逻辑组件对应端口：</p>
<table>
<thead>
<tr>
<th style="text-align:center">对应逻辑组件</th>
<th>端口</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Config Server</td>
<td>27019</td>
</tr>
<tr>
<td style="text-align:center">Router(mongos)</td>
<td>27017</td>
</tr>
<tr>
<td style="text-align:center">Shard1(replica set)</td>
<td>27030</td>
</tr>
<tr>
<td style="text-align:center">Shard2(replica set)</td>
<td>27031</td>
</tr>
</tbody>
</table>
<h2 id="一、创建目录：">一、创建目录：</h2>
<table>
<thead>
<tr>
<th style="text-align:center">对应逻辑组件</th>
<th>目录</th>
<th>用途        </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">通用</td>
<td>/app/mongodb/logs/</td>
<td>日志目录</td>
</tr>
<tr>
<td style="text-align:center">Config Server</td>
<td>/app/mongodb/configdb</td>
<td>Config Server数据库目录</td>
</tr>
<tr>
<td style="text-align:center">Shard(replica set)</td>
<td>/app/mongodb/data1/  &amp;&amp; /app/mongodb/data2/</td>
<td>两个Shard节点的数据库目录</td>
</tr>
</tbody>
</table>
<p>具体命令如下，生产环境下可以按实际情况修改：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="keyword">mkdir</span> -P /app/mongodb/logs/
<span class="keyword">mkdir</span> -P /app/mongodb/configdb
<span class="keyword">mkdir</span> -P /app/mongodb/data1/
<span class="keyword">mkdir</span> -P /app/mongodb/data2/
</pre></td></tr></table></figure>

<h2 id="二、启动Config_Server实例">二、启动Config Server实例</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">mongod</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">configsvr</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dbpath=/app/mongodb/configdb</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">logpath=/app/mongodb/logs/configdb</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27019</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">fork</span>
</pre></td></tr></table></figure>

<p><strong>—configsvr</strong> 的作用是修改默认端口为 27019 以及默认路径为 /data/configdb，你可能有疑问说为什么命令行里指定了数据库路径和端口号，还需要加—configsvr参数，到底以哪个为准？答案是以实际指定的数据库路径和端口号为准，而加–configsvr参数是为了使用ps命令时更容易识别出这个进程是Config Server实例。</p>
<h2 id="三、启动Mongos实例">三、启动Mongos实例</h2>
<p>在实际使用中，我们建议一个或多个应用对应一个Mongos实例，该应用相关数据存放的Shard对应到这个Mongos实例中。目前一个应用客户端只能与一个Mongos实例连接，如果要避免Mongos的单点故障，需要在Mongos前端再部署一个负载均衡器，或通过系统级别来完成Failover。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">mongos</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">configdb</span> <span class="comment">localhost:27019</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">logpath=/app/mongodb/logs/mongos</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">fork</span>
</pre></td></tr></table></figure>

<p>localhost:27019是指向Config Server实例的IP和端口。<br>mongos启动后，默认监听端口就是27017。</p>
<p>如果有多个Config Server实例时，可以用以下命令：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>mongos --configdb cfg0<span class="preprocessor">.example</span><span class="preprocessor">.net</span>:<span class="number">27019</span>,cfg1<span class="preprocessor">.example</span><span class="preprocessor">.net</span>:<span class="number">27019</span>,cfg2<span class="preprocessor">.example</span><span class="preprocessor">.net</span>:<span class="number">27019</span> --logpath=/app/mongodb/logs/mongos<span class="preprocessor">.log</span> --fork
</pre></td></tr></table></figure>

<h2 id="四、启动Shard实例">四、启动Shard实例</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">ulimit</span> <span class="literal">-</span><span class="comment">n</span> <span class="comment">2048</span> <span class="comment">&&</span> <span class="comment">mongod</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dbpath=/app/mongodb/data1/</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">logpath=/app/mongodb/logs/mongo1</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27030</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">fork</span>
<span class="comment">ulimit</span> <span class="literal">-</span><span class="comment">n</span> <span class="comment">2048</span> <span class="comment">&&</span> <span class="comment">mongod</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dbpath=/app/mongodb/data2/</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">logpath=/app/mongodb/logs/mongo2</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27031</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">fork</span>
</pre></td></tr></table></figure>

<p>在正式环境中，建议把两个Shard创建在两个物理节点中。</p>
<h2 id="五、查看进程">五、查看进程</h2>
<p>如果配置正确，执行 <strong>ps -ef | grep mongo</strong>，应该可以看到以下五个进程：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">mongod</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">configsvr</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dbpath=/app/mongodb/configdb</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">logpath=/app/mongodb/logs/configdb</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27019</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">fork</span>
<span class="comment">mongos</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">configdb</span> <span class="comment">localhost:27019</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">logpath=/app/mongodb/logs/mongos</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">fork</span>
<span class="comment">mongod</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dbpath=/app/mongodb/data1/</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">logpath=/app/mongodb/logs/mongo1</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27030</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">fork</span>
<span class="comment">mongod</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dbpath=/app/mongodb/data2/</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">logpath=/app/mongodb/logs/mongo2</span><span class="string">.</span><span class="comment">log</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27031</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">fork</span>
<span class="comment">grep</span> <span class="comment">mongo</span>
</pre></td></tr></table></figure>

<h2 id="六、把数据节点加到集群中">六、把数据节点加到集群中</h2>
<p>先在命令行运行mongo， 连接到mongos的27017端口，再执行以下命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>use admin
sh<span class="preprocessor">.addShard</span>(<span class="string">"localhost:27030"</span>)<span class="comment">;</span>
sh<span class="preprocessor">.addShard</span>(<span class="string">"localhost:27031"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<h2 id="七、对数据库启用Sharding">七、对数据库启用Sharding</h2>
<p>假设已有一个数据库performance，以及一个数据集erp_trade。我们使用shop_id作为Shard Key，但要说明的是，选择shop_id不是一个好的策略，具体原因后面会加以分析。</p>
<p>在对数据集做Sharding前，先检查Sharding的键是否已经做过索引，如果没有索引则Sharding无法执行。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>sh<span class="preprocessor">.enableSharding</span>(<span class="string">"performance"</span>)<span class="comment">;</span>
sh<span class="preprocessor">.shardCollection</span>(<span class="string">"performance.erp_trade"</span>, { <span class="string">"shop_id"</span>: <span class="number">1</span>} )
</pre></td></tr></table></figure>

<p>创建成功的话，可以看到以下提示信息。如果 Collection 里有数据，则MongoDB会自动进行数据平衡。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>{ "<span class="attribute">collectionsharded</span>" : <span class="value"><span class="string">"performance.erp_trade"</span></span>, "<span class="attribute">ok</span>" : <span class="value"><span class="number">1</span> </span>}
</pre></td></tr></table></figure>

<h1 id="选择Shard_Key的注意事项">选择Shard Key的注意事项</h1>
<p>将存储在MongoDB数据库中的Collection进行分片需要选定Sharding key，对于Sharding key的选定直接决定了集群中数据分布是否均衡、集群性能是否合理。那么我们究竟该选择什么样的字段来作为Sharding key呢？有如下几个需要考虑点。</p>
<ul>
<li>基数</li>
<li>查询隔离</li>
<li>排序</li>
<li>可靠性</li>
<li>索引优化</li>
</ul>
<blockquote>
<p>Shard Keys相关链接<br><a href="http://docs.mongodb.org/manual/core/sharding-shard-key/" target="_blank">http://docs.mongodb.org/manual/core/sharding-shard-key/</a></p>
</blockquote>
<p><strong>注意: 一旦确定Shard Key并执行Sharding后，Shard Key是不允许更改的。</strong></p>
<p>说到这里，大家一定可以看出刚才的shop_id做为一个分区键并不是很合理，因为一个shop_id会有很多交易数据，只使用shop_id来做Shard Key的话会导致无法拆分chunk。</p>
<p>使用sh.status()可以看到Sharding的原理是以shop_id的range进行分区的。分区的chunks共有11个，在两个Shard中分别有5个和6个chunks。</p>
<p>如果chunks数量过多，会提示</p>
<blockquote>
<p>too many chunks to print, use verbose if you want to force print</p>
</blockquote>
<p>可以用该命令代替：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="function">printShardingStatus(db.<span class="function">getSisterDB(<span class="string">"config"</span>)</span>,<span class="number">1</span>)</span>;
</pre></td></tr></table></figure>

<h1 id="总结">总结</h1>
<p>通过这次Sharding的实操，对Mongodb的分片原理和实施方式都有一定的了解。关于如何选择Shard Key，需要结合业务、查询条件等来评估一个合理、有效的Key。后续我们还需要多看文档，掌握MongoDB集群的运维、排错命令和技巧。</p>
<p>如有疑问或上文有错误的地方，欢迎反馈。</p>
]]></content:encoded>
      <comments>http://maizhibin.github.io/2014/05/19/mongodb-sarding-in-action/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[MongoDB安装脚本]]></title>
      <link>http://maizhibin.github.io/2014/05/19/mongodb-install-shell/</link>
      <guid>http://maizhibin.github.io/2014/05/19/mongodb-install-shell/</guid>
      <pubDate>Mon, 19 May 2014 07:12:46 GMT</pubDate>
      
      <content:encoded><![CDATA[<h1 id="MongoDB安装步骤">MongoDB安装步骤</h1>
<h2 id="安装并启动mongodb">安装并启动mongodb</h2>
<p>将以下内容保存为shell脚本并招行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="preprocessor">#!/bin/bash</span>
<span class="title">wget</span> http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-<span class="number">2.6</span><span class="number">.1</span>.tgz
<span class="title">tar</span> xvf mongodb-linux-x86_64-<span class="number">2.6</span><span class="number">.1</span>.tgz  
<span class="title">mkdir</span> -p /<span class="typedef"><span class="keyword">data</span>/mongodb/logs</span>
<span class="title">mkdir</span> -p /<span class="typedef"><span class="keyword">data</span>/mongodb/<span class="keyword">data</span></span>
<span class="title">mv</span> mongodb-linux-x86_64-<span class="number">2.6</span><span class="number">.1</span> /<span class="typedef"><span class="keyword">data</span>/mongodb</span>
<span class="title">ulimit</span> -n <span class="number">2048</span> && /<span class="typedef"><span class="keyword">data</span>/mongodb/mongodb-linux-x86_64-2.6.1/bin/mongod <span class="comment">--logpath /data/mongodb/logs/mongo.log --dbpath /data/mongodb/data --bind_ip 127.0.0.1 --fork</span></span>
</pre></td></tr></table></figure>

<blockquote>
<p>bind_ip: 只允许通过该IP连接<br>logpath: 日志路径<br>dbpath:  数据文件路径</p>
</blockquote>
<h2 id="运行mongodb客户端">运行mongodb客户端</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>/<span class="built_in">data</span>/mongodb/mongodb<span class="attribute">-linux</span><span class="attribute">-x86_64</span><span class="subst">-</span><span class="number">2.6</span><span class="number">.1</span>/bin/mongo
</pre></td></tr></table></figure>

<h2 id="创建数据库、用户和索引">创建数据库、用户和索引</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>use mydatabase
db<span class="preprocessor">.createUser</span>( { <span class="string">"user"</span> : <span class="string">"your_name"</span>,
                 <span class="string">"pwd"</span>: <span class="string">"your_password"</span>,
                 <span class="string">"roles"</span> : [ <span class="string">"readWrite"</span>] 
               })<span class="comment">;               </span>
db<span class="preprocessor">.your</span>_collection<span class="preprocessor">.ensureIndex</span>({<span class="string">"index_column1"</span>:<span class="number">1</span>,<span class="string">"index_column2"</span>:<span class="number">1</span>}, {unique:true})<span class="comment">;</span>
</pre></td></tr></table></figure>
]]></content:encoded>
      <comments>http://maizhibin.github.io/2014/05/19/mongodb-install-shell/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Linux常用脚本]]></title>
      <link>http://maizhibin.github.io/2014/05/19/my-new-post/</link>
      <guid>http://maizhibin.github.io/2014/05/19/my-new-post/</guid>
      <pubDate>Mon, 19 May 2014 05:23:01 GMT</pubDate>
      
      <content:encoded><![CDATA[<h2 id="目录与文件">目录与文件</h2>
<p>查找当前目录下.txt，最近30分钟内修改过的文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>find <span class="built_in">.</span> <span class="attribute">-name</span> <span class="string">'*.txt'</span> <span class="attribute">-type</span> f <span class="attribute">-mmin</span> <span class="subst">-</span><span class="number">30</span>
</pre></td></tr></table></figure>

<p>查找当前目录下.txt，最近30分钟内修改过的文件的详细情况。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>find <span class="built_in">.</span> <span class="attribute">-name</span> <span class="string">'*.txt'</span> <span class="attribute">-type</span> f <span class="attribute">-mmin</span> <span class="subst">-</span><span class="number">30</span> <span class="attribute">-ls</span>
</pre></td></tr></table></figure>

<p>查找当前目录下，最近1天内修改过的常规文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>find . -<span class="class"><span class="keyword">type</span> <span class="title">f</span> -<span class="title">mtime</span> -1</span>
</pre></td></tr></table></figure>

<p>查找当前目录下，最近1天前（2天内）修改过的常规文件。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>find . -<span class="class"><span class="keyword">type</span> <span class="title">f</span> -<span class="title">mtime</span> +1</span>
</pre></td></tr></table></figure> 

<p>注意这里的：-1, 1, +1的区别</p>
<h2 id="统计">统计</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>wc <span class="operator">-l</span>
</pre></td></tr></table></figure>

<h2 id="网络">网络</h2>
<h2 id="安全">安全</h2>
<h2 id="管理">管理</h2>
<h2 id="……">……</h2>
]]></content:encoded>
      <comments>http://maizhibin.github.io/2014/05/19/my-new-post/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[Hello World]]></title>
      <link>http://maizhibin.github.io/2014/05/19/hello-world/</link>
      <guid>http://maizhibin.github.io/2014/05/19/hello-world/</guid>
      <pubDate>Mon, 19 May 2014 05:08:06 GMT</pubDate>
      
      <content:encoded><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank">trobuleshooting</a> or you can ask me on <a href="https://github.com/tommy351/hexo/issues" target="_blank">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2>
<h3 id="Create_a_new_post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ hexo new <span class="string">"My New Post"</span>
</pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank">Writing</a></p>
<h3 id="Run_server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ hexo server
</pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ hexo generate
</pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>$ hexo deploy
</pre></td></tr></table></figure>

<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank">Deployment</a></p>
]]></content:encoded>
      <comments>http://maizhibin.github.io/2014/05/19/hello-world/#disqus_comments</comments>
    </item>
    
  </channel>
</rss>